AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "A sample template to create an S3, CloudFront, subdomain and configure all three to work together to serve React. 
              Includes a Lambda Edge to serve several react apps from one bucket/distro"


Parameters:
  CIBHostedZoneId:
    Description: "The hosted zone id from Route53 for the domain below"
    Type: String
  CIBDomainName:
    Description: "The domain name without the subdomain. domain.name"
    Type: String
  CIBSubdomain:
    Description: "The subdomain for this entire stack. Bucket, Lambda and Distro names derived from this"
    Type: String
  CIBCertificateArn:
    Description: "The SSL certificate for the domain above (must be a wild card *.domain.name)"
    Type: String
  CIBTagCreatedBy:
    Description: "Email or other identifier of the developer who built and deployed the stack"
    Type: String
  CIBTagCreatedDate:
    Description: "Todays date"
    Type: String
  Route53AliasHostedZone:
    Type: String
    Description: "This is a universal value that comes from AWS for various reasons. Take it as is and dont worry about it"
    Default: "Z2FDTNDATAQYW2"
  DefaultCachePolicy:
    Type: String
    Default: "658327ea-f89d-4fab-a63d-7e88639e58f6"

# ------------------------------------ S3 for React apps --------------------------------- #
Resources:
  CIBUIBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [".", [!Ref CIBSubdomain, !Ref CIBDomainName] ]
      Tags: 
        - Key: CreatedBy
          Value: !Ref CIBTagCreatedBy
        - Key: DateCreated
          Value: !Ref CIBTagCreatedDate
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Purpose
          Value: "Template bucket for SPA code"

  CIBUIBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CIBUIBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 
              - S3:GetObject
            Resource: !Sub arn:aws:s3:::${CIBUIBucket}/*

# --------------------------- DISTRIBUTION TEMPLATE -------------------------------------- #
# How to get the OAC id !GetAtt CIBCloudFrontOriginAccessControl.Id TODO create it here
# https://hayao-k.dev/migrating-cloudfront-oai-to-oac-using-cloudformation
  CIBCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CIBUIDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Ref CIBUIBucket
        Aliases:
          - !Ref CIBUIBucket
        Enabled: true
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref CIBCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Origins:
        - Id:  !GetAtt CIBUIBucket.RegionalDomainName
          DomainName: !GetAtt CIBUIBucket.RegionalDomainName
          S3OriginConfig:
            OriginAccessIdentity: ''
          OriginAccessControlId: !GetAtt CIBCloudFrontOriginAccessControl.Id
        DefaultCacheBehavior:
          Compress: false
          TargetOriginId: !GetAtt CIBUIBucket.RegionalDomainName
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: !Ref DefaultCachePolicy
          LambdaFunctionAssociations:
                - 
                  EventType: viewer-request
                  IncludeBody: true
                  LambdaFunctionARN: !Ref CIBLambdaEdgeFunct.Version
        DefaultRootObject: "/mayhem.html"
        CustomErrorResponses:
          - 
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: "/where-are-thu.html"
            ErrorCachingMinTTL: 100
          - 
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: "/where-are-thu.html"
            ErrorCachingMinTTL: 10
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
            - US
            - CA
      Tags: 
        - Key: CreatedBy
          Value: !Ref CIBTagCreatedBy
        - Key: DateCreated
          Value: !Ref CIBTagCreatedDate
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Purpose
          Value: "Cloudfront distribution for SPA"


# --------------------- EDGE LAMBDA TO ROUTE MULTIPLE REACT APPS  ----------------------------- #
# I ever want to automate the version and publishing piece, here is an example https://gist.github.com/jed/56b1f58297d374572bc51c59394c7e7f

  CIBLambdaEdgeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CIBLambdaEdgeFunctionRole
      Description: "Allows Lambda function to be deployed as lambda edge"
      Path: "/"
      ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action: 
              - "sts:AssumeRole"
            Principal:
              Service: 
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
      Tags: 
        - Key: CreatedBy
          Value: !Ref CIBTagCreatedBy
        - Key: DateCreated
          Value: !Ref CIBTagCreatedDate
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Purpose
          Value: "Lambda role this is Edge"

  CIBLambdaEdgeFunct:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: CIBLambdaEdgeFunct
      Description: "Lambda to be used as lambda@edge. U must publish a version first and use that to deploy to edge manually"
      Timeout: 3
      AutoPublishAlias: live 
      # https://aws.amazon.com/blogs/networking-and-content-delivery/managing-lambdaedge-and-cloudfront-deployments-by-using-a-ci-cd-pipeline/
      Role: !GetAtt CIBLambdaEdgeFunctionRole.Arn
      CodeUri: multy-spa-router/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Tags: 
        CreatedBy: !Ref CIBTagCreatedBy
        DateCreated: !Ref CIBTagCreatedDate
        Stack: !Ref AWS::StackName
        Purpose: "Lambda@edge to handle multiple React apps routing"

# --------------------- ROUTE 53 ----------------------------- #

  CIBTemplateDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref CIBHostedZoneId
      Comment: "Route53 record for subdomain"
      RecordSets:
        - Name: !Ref CIBUIBucket
          Type: A
          AliasTarget:
            HostedZoneId: !Ref Route53AliasHostedZone
            DNSName: !GetAtt CIBUIDistribution.DomainName


 # ---------------------------- OUTPUTS ---------------------------- #
Outputs:
  CIBUIBucketId:
    Description: "The name of the bucket to upload react code into, to be used in env"
    Value: !Ref CIBUIBucket
  CIBDomainName:
    Description: "Root url for Reacts on this stack"
    Value: !GetAtt CIBUIDistribution.DomainName
  CIBLambdaEdgeArn:
    Description: "The arn and version of the edge lambda LTS"
    Value: !Ref CIBLambdaEdgeFunct.Version
